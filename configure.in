# Use branch_id.txt to verify the tree identity?

AC_INIT(branch_id.txt)
AC_PREFIX_DEFAULT([/usr/mce])


# We need C, and some stuff for installing.

AC_PROG_CC
AC_PROG_LN_S


# Allow the user to suppress driver compile / install.

AC_ARG_WITH([driver],
			[AS_HELP_STRING([--with-driver=(yes|no)],
			[enable/disable driver compilation and installation])],
            [DO_MAS_DRIVER=$withval], [DO_MAS_DRIVER=yes])
AC_SUBST(DO_MAS_DRIVER)

dnl Some defaults.

AC_ARG_VAR([DEFAULT_EXPERIMENTFILE],
		   [the default experiment configuration file ]
		   [(/data/cryo/current_data/experiment.cfg is used if not specified)])
if test -z "$DEFAULT_EXPERIMENTFILE"; then
	DEFAULT_EXPERIMENTFILE="/data/cryo/current_data/experiment.cfg"
fi
AC_DEFINE_UNQUOTED([DEFAULT_EXPERIMENTFILE], ["$DEFAULT_EXPERIMENTFILE"],
				   [ Define to the default experiment configuration file. ])

AC_ARG_VAR([DEFAULT_FIBRE_CARD],
		   [the default fibre card number (0 is used if not specified)])
if test -z "$DEFAULT_FIBRE_CARD"; then
	DEFAULT_FIBRE_CARD=0
fi
AC_DEFINE_UNQUOTED([DEFAULT_FIBRE_CARD], [$DEFAULT_FIBRE_CARD],
				   [ Define to the number of the default fibre card. ])
AC_DEFINE_UNQUOTED([DEFAULT_FIBRE_CARD], [$DEFAULT_FIBRE_CARD],
				   [ Define to the number of the default fibre card. ])

AC_ARG_VAR([DEFAULT_HARDWAREFILE],
		   [the default hardware configuration file (/etc/mce/mce.cfg is used ]
		   [if not specified)])
if test -z "$DEFAULT_HARDWAREFILE"; then
	DEFAULT_HARDWAREFILE="/etc/mce/mce.cfg"
fi
AC_DEFINE_UNQUOTED([DEFAULT_HARDWAREFILE], ["$DEFAULT_HARDWAREFILE"],
				   [ Define to the default hardware configuration file. ])

AC_ARG_VAR([DEFAULT_MASFILE],
		   [the default MAS configuration file (/etc/mce/mas.cfg is used if ]
		   [not specified)])
if test -z "$DEFAULT_MASFILE"; then
	DEFAULT_MASFILE="/etc/mce/mas.cfg"
fi
AC_DEFINE_UNQUOTED([DEFAULT_MASFILE], ["$DEFAULT_MASFILE"],
				   [ Define to the default MAS configuration file. ])

# Some driver options.

AC_ARG_ENABLE([quiet-driver], [AS_HELP_STRING([--enable-quiet-driver],
      [build an unnecessarily quiet kernel driver])],
    [if test "x$withval" = "xno"; then
   DRIVER_QUIET=no
else
   DRIVER_QUIET=yes
fi],
[DRIVER_QUIET=no])

if test "x$DRIVER_QUIET" = "xyes"; then
  AC_DEFINE(DRIVER_QUIET, [1],
            [ Define to 1 to remove most messages from the kernel driver. ])
fi

AC_ARG_ENABLE([verbose-driver], [AS_HELP_STRING([--enable-verbose-driver],
      [build a very chatty kernel driver (for debugging only)])],
    [if test "x$withval" = "xno"; then
   DRIVER_VERBOSE=no
else
   DRIVER_VERBOSE=yes
fi],
[DRIVER_VERBOSE=no])

if test "x$DRIVER_VERBOSE" = "xyes"; then
  AC_DEFINE(DRIVER_VERBOSE, [1],
            [ Define to 1 to add debugging messages to the kernel driver. ])
fi

AC_ARG_WITH([bigphysarea],
            [AS_HELP_STRING([--without-bigphysarea], [disable bigphysarea])],
            [DRIVER_BIGPHYS=$withval], [DRIVER_BIGPHYS=yes])
if test "x$DRIVER_BIGPHYS" = "xyes"; then
  AC_DEFINE(BIGPHYS, [1],
            [ Define to 1 to use bigphysarea in the kernel driver. ])
fi

AC_ARG_WITH([fakemce],
            [AS_HELP_STRING([--with-fakemce], [enable fakemce])],
            [DRIVER_FAKEMCE=$withval], [DRIVER_FAKEMCE=no])
if test "x$DRIVER_FAKEMCE" = "xyes"; then
  AC_DEFINE(FAKEMCE, [1],
            [ Define to 1 to enable fakemce in the kernel driver. ])
fi
AC_SUBST(DRIVER_FAKEMCE)

dnl Should this be user configurable?
MAX_FIBRE_CARD=2
AC_DEFINE_UNQUOTED(MAX_FIBRE_CARD, [$MAX_FIBRE_CARD],
          [ Define to the total allowable number of fibre cards. ])
MCE_CFG_LIST="mce0.cfg"
MCE_CIN_LIST="mce0.cin"
if test $MAX_FIBRE_CARD -gt 1; then
  for n in $(seq $(expr $MAX_FIBRE_CARD - 1)); do
    MCE_CFG_LIST="$MCE_CFG_LIST mce$n.cfg"
    MCE_CIN_LIST="$MCE_CIN_LIST mce$n.cin"
  done
fi
AC_SUBST(MCE_CIN_LIST)
AC_SUBST(MCE_CFG_LIST)


dnl Always off, but here so autoheader picks it up.
if /bin/false; then
  AC_DEFINE(REALTIME, [1],
            [ Define to 1 to enable realtime in the kernel driver. ])
fi


# Check for php for config2
AC_CHECK_PROG([PHP_IS], [php], [yes], [no])
if test "$PHP_IS" = "no"; then
  AC_MSG_ERROR([cannot find php; perhaps you need to install php5-cli])
fi

# Configure the kernel source directory.

KERNEL_DIR=/lib/modules/`uname -r`/
AC_ARG_WITH([kernel-dir],
            [AS_HELP_STRING([--with-kernel-dir],
							[set the target kernel source tree ]
							[(e.g. $KERNEL_DIR)])],
            [KERNEL_DIR=$withval], [])
AC_SUBST(KERNEL_DIR)


# Allow the user to suppress/relocate swig/python compile/install

PYTHON_VERSION=`echo 'import sys; print sys.version[[:3]]' | python`
PYTHON_DIR=/usr/include/python${PYTHON_VERSION}/
AC_ARG_WITH([python],
            [AS_HELP_STRING([--with-python=(PATH|yes|no)],
                            [enable/disable swig/python compilation and ]
							[installation, PATH default is $PYTHON_DIR])],
            [PYTHON_DIR=$withval])
AC_SUBST(PYTHON_DIR)
DO_MAS_SWIG=yes
test "$PYTHON_DIR" = "no" && DO_MAS_SWIG=no
AC_SUBST(DO_MAS_SWIG)

# MAS user and group are configurable

AC_ARG_WITH([user],
            [AS_HELP_STRING([--with-user=LOGIN],[set default MAS user])],
            [MAS_USER=$withval], [MAS_USER=mce])
AC_ARG_WITH([group],
            [AS_HELP_STRING([--with-group=GROUP],[set default MAS group])],
            [MAS_GROUP=$withval], [MAS_GROUP=mce])
AC_SUBST(MAS_USER)
AC_SUBST(MAS_GROUP)


# MAS install path is configurable via --prefix

MAS_PREFIX="\${prefix}/"
AC_SUBST(MAS_PREFIX)


# The location of libconfig is configurable.  libconfigurable.

AC_ARG_WITH([libconfig],
            [AS_HELP_STRING([--with-libconfig=PATH],
              [specify location of libconfig, e.g. /usr/local/])],
            [LIBCONFIG_DIR=$withval],
            [LIBCONFIG_DIR=])
if test "$LIBCONFIG_DIR" != ""; then
  LIBCONFIG_ARGS="-L$LIBCONFIG_DIR/lib"
else
  LIBCONFIG_ARGS=""
fi
LIBCONFIG_ARGS="$LIBCONFIG_ARGS -lconfig"
AC_SUBST(LIBCONFIG_ARGS)


# Check for libconfig.

AC_CHECK_LIB([config], [config_init], ,
             [AC_MSG_FAILURE([could not find libconfig, ]
			 [please install it from www.hyperrealm.com/libconfig/!])],
             "$LIBCONFIG_ARGS" )


# Check for libreadline

AC_CHECK_HEADER([readline/readline.h], ,
             [AC_MSG_FAILURE([please install the libreadline-dev package.])])
AC_CHECK_LIB([readline], [readline], ,
             [AC_MSG_FAILURE([please install the libreadline package.])])


# Check for bigphysarea.

if test "$DO_MAS_DRIVER" != "no" && test "$DRIVER_BIGPHYS" != "no"; then
BIGPHYS_H=${KERNEL_DIR}/build/include/linux/bigphysarea.h
AC_CHECK_HEADER([$BIGPHYS_H],
                [],
                [AC_MSG_FAILURE([could not find bigphysarea.h in the ]
				[kernel build tree; perhaps you want --without-bigphysarea])])
fi


dnl Check for swig and python dev headers.

if test "$PYTHON_DIR" != "no"; then
   AC_CHECK_PROG(HAS_SWIG, swig, yes, no)
   test "$HAS_SWIG" != "yes" && \
      AC_MSG_FAILURE([please install swig package or pass --without-python.])
   AC_CHECK_HEADER([$PYTHON_DIR/Python.h], ,
                   [AC_MSG_FAILURE([could not find Python.h; perhaps you want ]
				   [--with-python=... or you need to install python-dev])])
fi


dnl Write.

AC_CONFIG_HEADERS([defaults/config.h])
AC_CONFIG_FILES([Makefile])
AC_CONFIG_FILES([config2/Makefile])
AC_CONFIG_FILES([driver/Makefile])
AC_CONFIG_FILES([makefiles/Makefile.install makefiles/Makefile.paths])
AC_CONFIG_FILES([scripts/mas scripts/mas_mknodes],
                [chmod a+x $ac_file])
AC_OUTPUT

if test ! -f config2/mce0.cin; then
  echo
  echo "  Before building MAS, you must first select the mce.cin files to use"
  echo "  as your hardware configuration files.  For each fibre card in your"
  echo "  system, copy an appropriate template files from config2/v4 or "
  echo "  config2/v5 to config2/mce#.cin, (where # is the fibre card number),"
  echo "  Then modify each of these files to match the configuration of the"
  echo "  subrack attached to the given fibre card."
  echo 
fi
