# Use branch_id.txt to verify the tree identity?

AC_INIT(branch_id.txt)
AC_PREFIX_DEFAULT([/usr/mce])


# We need C, and some stuff for installing.

AC_PROG_CC
AC_PROG_LN_S

dnl Allow the user to suppress doing the config2 stuff
AC_ARG_ENABLE([config2], [AS_HELP_STRING([--disable-config2],
              [disable building or installing mce.cfg and mas.cfg])],
              [DO_CONFIG2=$enableval], [DO_CONFIG2=yes])
AC_SUBST(DO_CONFIG2)


# Shared libraries
AC_ARG_ENABLE([shared], [AS_HELP_STRING([--enable-shared],
              [build shared libraries instead of static ones])],
              [if test "$enableval" = "no"; then SHARED="no"; else SHARED="yes";
               fi], [SHARED="no"])
AC_SUBST(SHARED)
if test "x$SHARED" = "xyes"; then
  AC_DEFINE([SHARED],, [ Define if building shared libraries ])
fi

# Allow the user to suppress driver compile / install.

AC_ARG_ENABLE([driver],
			[AS_HELP_STRING([--disable-driver],
			[disable driver compilation and installation])],
            [DO_MAS_DRIVER=$enableval], [DO_MAS_DRIVER=yes])
AC_ARG_WITH([driver],
			[AS_HELP_STRING([--without-driver],
			[deprecated: use --disable-driver instead])],
      [AC_MSG_WARN([--with-driver and --without-driver are deprecated, ]
      [use --enable-driver or --disable-driver instead.])
      DO_MAS_DRIVER=$withval], [DO_MAS_DRIVER=yes])
AC_SUBST(DO_MAS_DRIVER)

dnl Multicard MAS
AC_ARG_ENABLE([multicard],
              [AS_HELP_STRING([--enable-multicard=N], [build a MAS which ]
              [supports multiple (up to N) fibre cards.  If N is omitted, ]
              [2 is assumed.  N=0 and N=1 are eqivalent to --disable-multicard ]
              [ (ie. the default behaviour: multicard support disabled).])],
              [
               case "${enableval}" in
                 (0|no) MAX_FIBRE_CARD=1 ;;
                 (1|2|3|4|5|6|7|8|9) MAX_FIBRE_CARD="${enableval}" ;;
                 (*) MAX_FIBRE_CARD=2 ;;
               esac
               ], [MAX_FIBRE_CARD=1])
                   
AC_DEFINE_UNQUOTED(MAX_FIBRE_CARD, [$MAX_FIBRE_CARD],
          [ Define to the total allowable number of fibre cards. ])
if test $MAX_FIBRE_CARD -eq 1; then
  FIRST_MCE_CIN="mce.cin"
  MCE_CFG_LIST="mce.cfg"
  MCE_CIN_LIST="mce.cin"
  MULTICARD=0
else
  FIRST_MCE_CIN="mce0.cin"
  MCE_CFG_LIST="mce0.cfg"
  MCE_CIN_LIST="mce0.cin"
  MULTICARD=1
  for n in $(seq $(expr $MAX_FIBRE_CARD - 1)); do
    MCE_CFG_LIST="$MCE_CFG_LIST mce$n.cfg"
    MCE_CIN_LIST="$MCE_CIN_LIST mce$n.cin"
  done
fi
AC_SUBST(MCE_CIN_LIST)
AC_SUBST(MCE_CFG_LIST)
AC_SUBST(FIRST_MCE_CIN)
AC_SUBST(MULTICARD)
AC_DEFINE_UNQUOTED(MULTICARD, [$MULTICARD],
                   [ Define to 1 to enable multicard MAS ])

dnl Some defaults.

AC_ARG_VAR([DEFAULT_EXPERIMENTFILE],
		   [the default experiment configuration file ]
		   [($][{MAS_DATA}/experiment.cfg is used if not specified)])
if test -z "$DEFAULT_EXPERIMENTFILE"; then
	DEFAULT_EXPERIMENTFILE="\${MAS_DATA}/experiment.cfg"
fi
AC_DEFINE_UNQUOTED([DEFAULT_EXPERIMENTFILE], ["$DEFAULT_EXPERIMENTFILE"],
				   [ Define to the default experiment configuration file. ])

AC_ARG_VAR([DEFAULT_FIBRE_CARD],
		   [the default fibre card number (0 is used if not specified)])
if test -z "$DEFAULT_FIBRE_CARD"; then
	DEFAULT_FIBRE_CARD=0
fi
AC_DEFINE_UNQUOTED([DEFAULT_FIBRE_CARD], [$DEFAULT_FIBRE_CARD],
				   [ Define to the number of the default fibre card. ])

AC_ARG_VAR([DEFAULT_CMD_DEVICE], [the default command device ]
[(/dev/mce_cmd${MAS_CARD} is used if not specified)])
if test -z "$DEFAULT_CMD_DEVICE"; then
	DEFAULT_CMD_DEVICE="/dev/mce_cmd\${MAS_CARD}"
fi
AC_DEFINE_UNQUOTED([DEFAULT_CMD_DEVICE], ["$DEFAULT_CMD_DEVICE"],
				   [ Define to the default command device. ])

AC_ARG_VAR([DEFAULT_DATA_DEVICE], [the default data device ]
[(/dev/mce_data${MAS_CARD} is used if not specified)])
if test -z "$DEFAULT_DATA_DEVICE"; then
	DEFAULT_DATA_DEVICE="/dev/mce_data\${MAS_CARD}"
fi
AC_DEFINE_UNQUOTED([DEFAULT_DATA_DEVICE], ["$DEFAULT_DATA_DEVICE"],
				   [ Define to the default data device format. ])

AC_ARG_VAR([DEFAULT_DSP_DEVICE], [the default dsp device ]
[(/dev/mce_dsp${MAS_CARD} is used if not specified)])
if test -z "$DEFAULT_DSP_DEVICE"; then
	DEFAULT_DSP_DEVICE="/dev/mce_dsp\${MAS_CARD}"
fi
AC_DEFINE_UNQUOTED([DEFAULT_DSP_DEVICE], ["$DEFAULT_DSP_DEVICE"],
				   [ Define to the default dsp device format. ])

AC_ARG_VAR([DEFAULT_HARDWAREFILE],
		   [the default hardware configuration filename format specifier used by ]
       [single card MAS.  (/etc/mce/mce.cfg is used if not specified, or ]
       [/etc/mce/mce${MAS_CARD}.cfg, in the case of Multicard MAS)])
if test -z "$DEFAULT_HARDWAREFILE"; then
  if test $MAX_FIBRE_CARD -eq 1; then
    DEFAULT_HARDWAREFILE="/etc/mce/mce.cfg"
  else
    DEFAULT_HARDWAREFILE="/etc/mce/mce\${MAS_CARD}.cfg"
  fi
fi
AC_DEFINE_UNQUOTED([DEFAULT_HARDWAREFILE], ["$DEFAULT_HARDWAREFILE"],
                   [ Define to the default hardware configuration file. ])


AC_ARG_VAR([DEFAULT_MASFILE],
		   [the default MAS configuration file (/etc/mce/mas.cfg is used if ]
		   [not specified)])
if test -z "$DEFAULT_MASFILE"; then
	DEFAULT_MASFILE="/etc/mce/mas.cfg"
fi
AC_DEFINE_UNQUOTED([DEFAULT_MASFILE], ["$DEFAULT_MASFILE"],
				   [ Define to the default MAS configuration file. ])

# Some driver options.

AC_ARG_ENABLE([quiet-driver], [AS_HELP_STRING([--enable-quiet-driver],
      [build an unnecessarily quiet kernel driver])],
    [if test "x$withval" = "xno"; then
   DRIVER_QUIET=no
else
   DRIVER_QUIET=yes
fi],
[DRIVER_QUIET=no])

if test "x$DRIVER_QUIET" = "xyes"; then
  AC_DEFINE(DRIVER_QUIET, [1],
            [ Define to 1 to remove most messages from the kernel driver. ])
fi

AC_ARG_ENABLE([verbose-driver], [AS_HELP_STRING([--enable-verbose-driver],
      [build a very chatty kernel driver (for debugging only)])],
    [if test "x$withval" = "xno"; then
   DRIVER_VERBOSE=no
else
   DRIVER_VERBOSE=yes
fi],
[DRIVER_VERBOSE=no])

if test "x$DRIVER_VERBOSE" = "xyes"; then
  AC_DEFINE(DRIVER_VERBOSE, [1],
            [ Define to 1 to add debugging messages to the kernel driver. ])
fi

AC_ARG_ENABLE([bigphysarea],
            [AS_HELP_STRING([--disable-bigphysarea], [compile driver without ]
             [bigphysarea support])],
            [DRIVER_BIGPHYS=$enableval], [DRIVER_BIGPHYS=yes])
AC_ARG_WITH([bigphysarea],
            [AS_HELP_STRING([--without-bigphysarea],
                            [deprecated: use --disable-bigphysarea instead])],
            [AC_MSG_WARN([--with-bigphysarea and --without-bigphysarea are ]
            [deprecated, use --enable-bigphysarea or --disable-bigphysarea ]
            [instead.])
            DRIVER_BIGPHYS=$withval], [DRIVER_BIGPHYS=yes])
if test "x$DRIVER_BIGPHYS" = "xyes"; then
  AC_DEFINE(BIGPHYS, [1],
            [ Define to 1 to use bigphysarea in the kernel driver. ])
fi

AC_ARG_ENABLE([fakemce],
            [AS_HELP_STRING([--enable-fakemce], [build the fakemce device ]
            [into the kernel driver])],
            [DRIVER_FAKEMCE=$enableval], [DRIVER_FAKEMCE=no])
AC_ARG_WITH([fakemce],
            [AS_HELP_STRING([--with-fakemce],
                            [deprecated: use --enable-fakemce instead])],
            [AC_MSG_WARN([--with-fakemce and --without-fakemce are ]
            [deprecated, use --enable-fakemce or --disable-fakemce instead.])
            DRIVER_FAKEMCE=$withval], [DRIVER_FAKEMCE=no])
if test "x$DRIVER_FAKEMCE" = "xyes"; then
  AC_DEFINE(FAKEMCE, [1],
            [ Define to 1 to enable fakemce in the kernel driver. ])
fi
AC_SUBST(DRIVER_FAKEMCE)


dnl Always off, but here so autoheader picks it up.
if /bin/false; then
  AC_DEFINE(REALTIME, [1],
            [ Define to 1 to enable realtime in the kernel driver. ])
fi


# Check for php for config2
AC_CHECK_PROG([PHP_IS], [php], [yes], [no])
if test "$PHP_IS" = "no"; then
  AC_MSG_ERROR([cannot find php; perhaps you need to install php5-cli])
fi

# Configure the kernel source directory.

KERNEL_DIR=/lib/modules/`uname -r`/
AC_ARG_WITH([kernel-dir],
            [AS_HELP_STRING([--with-kernel-dir=DIR],
							[set the target kernel source tree to DIR ]
							[(e.g. $KERNEL_DIR)])],
            [KERNEL_DIR=$withval], [])
AC_SUBST(KERNEL_DIR)


# Allow the user to suppress/relocate swig/python compile/install

PYTHON_VERSION=`echo 'import sys; print sys.version[[:3]]' | python`
PYTHON_DIR=/usr/include/python${PYTHON_VERSION}/
AC_ARG_WITH([python],
            [AS_HELP_STRING([--with-python=(PATH|yes|no)],
                            [enable/disable swig/python compilation and ]
							[installation, PATH default is $PYTHON_DIR])],
            [PYTHON_DIR=$withval])
AC_SUBST(PYTHON_DIR)
DO_MAS_SWIG=yes
test "$PYTHON_DIR" = "no" && DO_MAS_SWIG=no
AC_SUBST(DO_MAS_SWIG)

# MAS user and group are configurable

AC_ARG_WITH([user],
            [AS_HELP_STRING([--with-user=LOGIN],[set default MAS user])],
            [MAS_USER=$withval], [MAS_USER=mce])
AC_ARG_WITH([group],
            [AS_HELP_STRING([--with-group=GROUP],[set default MAS group])],
            [MAS_GROUP=$withval], [MAS_GROUP=mce])
AC_SUBST(MAS_USER)
AC_SUBST(MAS_GROUP)
AC_DEFINE_UNQUOTED([MAS_USER], ["$MAS_USER"], [ The MAS user ])
AC_DEFINE_UNQUOTED([MAS_GROUP], ["$MAS_GROUP"], [ The MAS group ])


# MAS install path is configurable via --prefix

MAS_PREFIX="\${prefix}"
AC_SUBST(MAS_PREFIX)


# The location of libconfig is configurable.  libconfigurable.

AC_ARG_WITH([libconfig],
            [AS_HELP_STRING([--with-libconfig=PATH],
              [specify location of libconfig, e.g. /usr/local/])],
            [LIBCONFIG_DIR=$withval],
            [LIBCONFIG_DIR=])
if test "$LIBCONFIG_DIR" != ""; then
  LIBCONFIG_ARGS="-L$LIBCONFIG_DIR/lib"
else
  LIBCONFIG_ARGS=""
fi
LIBCONFIG_ARGS="$LIBCONFIG_ARGS -lconfig"
AC_SUBST(LIBCONFIG_ARGS)


# Check for libconfig.

AC_CHECK_LIB([config], [config_init], ,
             [AC_MSG_FAILURE([could not find libconfig, ]
			 [please install it from www.hyperrealm.com/libconfig/!])],
             "$LIBCONFIG_ARGS" )


# Check for libreadline

AC_CHECK_HEADER([readline/readline.h], ,
             [AC_MSG_FAILURE([please install the libreadline-dev package.])])

# old versions of readline don't automatically bring in ncurses:
AC_SEARCH_LIBS([readline], [readline], , [
  AC_SEARCH_LIBS([tgetent], [ncurses], [
    # found ncurses, invalidate the cache and try again
    unset ac_cv_search_readline
    AC_SEARCH_LIBS([readline], [readline], ,
      # found ncurses, but still readline doesn't work
      [AC_MSG_FAILURE([please install the libreadline package.])])
    ],[
       # no ncurses, so just complain about readline
       AC_MSG_FAILURE([please install the libreadline package.])])])



# Check for bigphysarea.

if test "$DO_MAS_DRIVER" != "no" && test "$DRIVER_BIGPHYS" != "no"; then
BIGPHYS_H=${KERNEL_DIR}/build/include/linux/bigphysarea.h
AC_CHECK_HEADER([$BIGPHYS_H],
                [],
                [AC_MSG_FAILURE([could not find bigphysarea.h in the ]
				[kernel build tree; perhaps you want --without-bigphysarea])])
fi


dnl Check for swig and python dev headers.

if test "$PYTHON_DIR" != "no"; then
   AC_CHECK_PROG(HAS_SWIG, swig, yes, no)
   test "$HAS_SWIG" != "yes" && \
      AC_MSG_FAILURE([please install swig package or pass --without-python.])
   AC_CHECK_HEADER([$PYTHON_DIR/Python.h], ,
                   [AC_MSG_FAILURE([could not find Python.h; perhaps you want ]
				   [--with-python=... or you need to install python-dev])])
fi


dnl Write.

AC_CONFIG_HEADERS([defaults/config.h])
AC_CONFIG_FILES([Makefile])
AC_CONFIG_FILES([applications/mas_config/Makefile])
AC_CONFIG_FILES([config2/Makefile])
AC_CONFIG_FILES([driver/Makefile])
AC_CONFIG_FILES([makefiles/Makefile.install makefiles/Makefile.paths])
AC_CONFIG_FILES([scripts/mas scripts/mas_mknodes],
                [chmod a+x $ac_file])
AC_OUTPUT

dnl Handy configure summary
echo
echo "Configure summary:"
echo "  kernel driver:           ${DO_MAS_DRIVER}"
if test "$DO_MAS_DRIVER" != "no"; then
  echo "    ... bigphysarea:       ${DRIVER_BIGPHYS}"
  echo "    ... fakemce:           ${DRIVER_FAKEMCE}"
  echo "    ... verbose debugging: ${DRIVER_VERBOSE}"
  echo "    ... disable error msg: ${DRIVER_QUIET}"
  echo
fi
echo "  shared libraries:        ${SHARED}"
if test $MAX_FIBRE_CARD -eq 1; then
  echo "  Multicard support:       no"
else
  echo "  Multicard support:       yes (max ${MAX_FIBRE_CARD} cards)"
fi
echo "  build mce.cfg/mas.cfg:   ${DO_CONFIG2}"
echo "  MAS user/group:          ${MAS_USER}/${MAS_GROUP}"

if test ! -f config2/$FIRST_MCE_CIN; then
  echo
  if test $MAX_FIBRE_CARD -eq 1; then
    echo "
  Before building MAS, you must first select the mce.cin file to use as your
  hardware configuration file.  To do this, copy an appropriate template file
  from config2/v4 or config2/v5 to config2/mce.cin.  Then modify this file to
  match the configuration of your subrack.
"
  else
    echo "
  Before building MAS, you must first select the mce.cin files to use as your
  hardware configuration files.  For each fibre card in your system, copy an
  appropriate template files from config2/v4 or config2/v5 to config2/mce#.cin,
  (where # is the fibre card number).  Then modify each of these files to match
  the configuration of the subrack attached to the given fibre card.
"
  fi
fi
