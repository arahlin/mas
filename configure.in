# Use branch_id.txt to verify the tree identity?

AC_INIT(branch_id.txt)


# We need C, and some stuff for installing.

AC_PROG_CC
AC_PROG_LN_S


# Allow the user to suppress driver compile / install.

AC_ARG_WITH([driver],
            [AS_HELP_STRING([--with-driver=(yes|no)],
                            [enable/disable driver compilation and installation])],
            [DO_MAS_DRIVER=$withval], [DO_MAS_DRIVER=yes])
AC_SUBST(DO_MAS_DRIVER)


# Some driver options.

AC_ARG_WITH([bigphysarea],
            [AS_HELP_STRING([--without-bigphysarea], [disable bigphysarea])],
            [DRIVER_BIGPHYS=$withval], [DRIVER_BIGPHYS=yes])
AC_SUBST(DRIVER_BIGPHYS)
AC_ARG_WITH([fakemce],
            [AS_HELP_STRING([--with-fakemce], [enable fakemce])],
            [DRIVER_FAKEMCE=$withval], [DRIVER_FAKEMCE=no])
AC_SUBST(DRIVER_FAKEMCE)


# Configure the kernel source directory.

KERNEL_DIR=/lib/modules/`uname -r`/
AC_ARG_WITH([kernel-dir],
            [AS_HELP_STRING([--with-kernel-dir], [set the target kernel source tree (e.g. $KERNEL_DIR)])],
	    [KERNEL_DIR=$withval], [])
AC_SUBST(KERNEL_DIR)


# Allow the user to suppress/relocate swig/python compile/install

PYTHON_DIR=/usr/include/python2.5/
AC_ARG_WITH([python],
            [AS_HELP_STRING([--with-python=(PATH|yes|no)],
                            [enable/disable swig/python compilation and installation, PATH default is $PYTHON_DIR])],
            [PYTHON_DIR=$withval])
AC_SUBST(PYTHON_DIR)
DO_MAS_SWIG=yes
test "$PYTHON_DIR" = "no" && DO_MAS_SWIG=no
AC_SUBST(DO_MAS_SWIG)

# MAS user and group are configurable

AC_ARG_WITH([user],
            [AS_HELP_STRING([--with-user=LOGIN],[set default MAS user])],
	    [MAS_USER=$withval], [MAS_USER=mce])
AC_ARG_WITH([group],
            [AS_HELP_STRING([--with-group=GROUP],[set default MAS group])],
	    [MAS_GROUP=$withval], [MAS_GROUP=mce])
AC_SUBST(MAS_USER)
AC_SUBST(MAS_GROUP)


# MAS install path is configurable

AC_ARG_WITH([prefix],
            [AS_HELP_STRING([--with-prefix=PATH],[set default MAS install location, e.g. /usr/mce])],
	    [MAS_PREFIX=$withval/], [MAS_PREFIX=/usr/mce/])
AC_SUBST(MAS_PREFIX)


# The location of libconfig is configurable.  libconfigurable.

AC_ARG_WITH([libconfig],
            [AS_HELP_STRING([--with-libconfig=PATH],
              [specify location of libconfig, e.g. /usr/local/])],
            [LIBCONFIG_DIR=$withval],
            [LIBCONFIG_DIR=])
if test "$LIBCONFIG_DIR" != ""; then 
  LIBCONFIG_ARGS="-L$LIBCONFIG_DIR/lib"
else
  LIBCONFIG_ARGS=""
fi
LIBCONFIG_ARGS="$LIBCONFIG_ARGS -lconfig"
AC_SUBST(LIBCONFIG_ARGS)


# Check for libconfig.

AC_CHECK_LIB([config], [config_init], ,
             [AC_MSG_FAILURE([could not find libconfig, please install it from www.hyperrealm.com/libconfig/!])],
             "$LIBCONFIG_ARGS" )


# Check for libreadline

AC_CHECK_HEADER([readline/readline.h], ,
             [AC_MSG_FAILURE([please install the libreadline-dev package.])])
AC_CHECK_LIB([readline], [readline], ,
             [AC_MSG_FAILURE([please install the libreadline package.])])
	     

# Check for bigphysarea.

if test "$DO_MAS_DRIVER" != "no" && test "$DRIVER_BIGPHYS" != "no"; then
BIGPHYS_H=${KERNEL_DIR}/build/include/linux/bigphysarea.h
AC_CHECK_HEADER([$BIGPHYS_H],
		[],
		[AC_MSG_FAILURE([could not find bigphysarea.h in the kernel build tree; perhaps you want --without-bigphysarea])])
fi


dnl Check for swig and python dev headers.

if test "$PYTHON_DIR" != "no"; then
   AC_CHECK_PROG(HAS_SWIG, swig, yes, no)
   test "$HAS_SWIG" != "yes" && \
      AC_MSG_FAILURE([please install swig package or pass --without-python.])
   AC_CHECK_HEADER([$PYTHON_DIR/Python.h], ,
                   [AC_MSG_FAILURE([could not find Python.h; perhaps you want --with-python=... or you need to install python-dev])])
fi


dnl Write.

AC_OUTPUT(Makefile)
AC_OUTPUT(makefiles/Makefile.install)
AC_OUTPUT(makefiles/Makefile.paths)
AC_OUTPUT(driver/Makefile)
AC_OUTPUT(driver/mcedsp_mknodes)

