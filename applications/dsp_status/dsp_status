#!/usr/bin/python

import sys
import time
import subprocess as sp
from optparse import OptionParser

BIN_DIR = '/usr/mce/bin/'

class dspError(Exception):
    pass

class dsp:
    X, Y, P = 'X', 'Y', 'P'

    def cmd(self, args):
        cmd = [BIN_DIR + 'dsp_cmd', '-qpx'] + [str(x) for x in args]
        p = sp.Popen(cmd, stdout=sp.PIPE, stderr=sp.STDOUT)
        out, err = p.communicate()
        out = out.strip()
        # Format of dsp_cmd output (when invoked with -qp) is:
        #                                              (write, ok)
        #  ok : Y[0] = 0xa5                            (read, ok)
        #  error : read expects at most 2 arguments    (error)
        words = out.split()
        if len(words)>0 and words[0] != 'ok':
            raise dspError, "dsp_cmd says: '%s'" % out
        if len(words) > 1:
            return int(words[4], 0)

    def read(self, mem, addr, n=0):
        if n == 0:
            return self.cmd(['read', mem, '%#x' % addr])
        return [self.read(mem, addr+i) for i in range(n)]

    def write(self, mem, addr, data):
        if not hasattr(data, '__len__'):
            return self.cmd(['write', mem, '%#x' % addr, '%#x' % data])
        for i in range(len(data)):
            self.write(mem, addr+i, data[i])

def get_bit(data, bit):
    return (data >> bit) & 1

def set_bit(data, bit):
    return data | (1 << bit)

def clear_bit(data, bit):
    if get_bit(data, bit):
        data = data ^ (1 << bit)
    return data

def formatter_summary(a, b, **kwargs):
    a = ' '*kwargs.get('indent',0) + a
    return "%-20s : %s" % (a, b)

def formatter_runfile(a, b, **kwargs):
    indent = ' '*kwargs.get('indent',0)
    return indent + "<%s> %s" % (a, b)

ADDRS = {
    'STATUS': 0,
    'MODE': 1,
    'VERSION': 3,
    }
    
status_bits_U0104 = [
    ('APPLICATION_RUNNING', 0),
    ('SEND_IO_TO_HOST', 1),
    ('FATAL_ERROR', 2),
    ('FO_WRD_RCV', 3),
    ('HST_NFYD', 9),
    ('CON_DEMAND', 10),
    ('CON_MCE', 11),
    ('PCIDMA_RESTART', 14),
    ('PCIDMA_RESUME', 15),
    ('PCIDMA_RETRY', 16),
    ('QT_ENABLED', 17),
    ('QT_FLUSH', 18),
    ('QT_NEW_GRANT', 19),
    ]

status_bits_U0105 = [
    ('APPLICATION_RUNNING', 0),
    ('SEND_IO_TO_HOST', 1),
    ('FATAL_ERROR', 2),
    ('FO_WRD_RCV', 3),
    ('HST_NFYD', 9),
    ('CON_DEMAND', 10),
    ('CON_MCE', 11),
    ('PCIDMA_RESTART', 16),
    ('PCIDMA_RESUME', 17),
    ('PCIDMA_RETRY', 18),
    ('QT_FLUSH', 20),
    ('RP_BUFFER_FULL', 21),
    ('FREEZER', 22),
    ('MAIN_LOOP_POLL', 23),
    ]

status_bit_sets = {
    0x550104: status_bits_U0104,
    0x550105: status_bits_U0105,
    0x550106: status_bits_U0105,
    'default': status_bits_U0105,
}

mode_bits = [
    ( 'MODE_APPLICATION', 0),
    ( 'MODE_MCE', 1),
    ( 'MODE_QT', 2),
    ( 'MODE_RP_BUFFER', 3),
    ]

pcidma_errors_U0104 = [
    ('EC_TRTY' , 0x48),
    ('EC_TO'   , 0x49),
    ('EC_TDIS' , 0x4A),
    ('EC_TAB'  , 0x4B),
    ('EC_MAB'  , 0x4C),
    ('EC_DPER' , 0x4D),
    ('EC_APER' , 0x4E),
    ]

pcidma_errors_U0105 = [(a,b-0x13) for a,b in pcidma_errors_U0104]
pcidma_errors_sets = {
    0x550104: pcidma_errors_U0104,
    0x550105: pcidma_errors_U0105,
    0x550106: pcidma_errors_U0105,
    'default': pcidma_errors_U0105,
}

if __name__ == '__main__':        
    o = OptionParser()
    o.add_option('--runfile',action='store_true')
    o.add_option('--pcidma',action='store_true')
    opts, args = o.parse_args()

    if opts.runfile:
        formatter = formatter_runfile
    else:
        formatter = formatter_summary

    d = dsp()
    
    if opts.runfile:
        print '<dsp_status>'

    try:
        vers = d.read("X", ADDRS['VERSION'])
    except dspError, msg:
        sys.stderr.write('Failed to query version.  Error message: \n')
        print formatter('ERROR', msg, indent=1)
        if opts.runfile:
            print '</dsp_status>'
        sys.exit(1)

    print formatter('CODE_VERSION', '%#x' % vers, indent=1)
 
    status_bits = status_bit_sets.get(vers, status_bit_sets['default'])
    status_dict = dict(status_bits)

    stat = d.read("X", ADDRS['STATUS'])
    print formatter('STATUS', '%#06x' % stat, indent=1)
    for k,b in status_bits:
        print formatter(k, '%i' % get_bit(stat, b), indent=2)

    if vers >= 0x550105 and vers < 0x560000:
        mode = d.read('X', ADDRS['MODE'])
        print formatter('MODE', '%#06x' % mode, indent=1)
        for k,b in mode_bits:
            print formatter(k, '%i' % get_bit(mode, b), indent=2)

        stat = set_bit(stat, status_dict['MAIN_LOOP_POLL'])
        d.write('X', ADDRS['STATUS'], stat)
        time.sleep(.1)
        stat = d.read('X', ADDRS['STATUS'])
        if get_bit(stat, status_dict['MAIN_LOOP_POLL']):
            stat = 'stalled'
        else:
            stat = 'running'
        print formatter('MAIN_LOOP', stat, indent=1)

    if opts.pcidma:
        for k,a in pcidma_errors_sets.get(vers, pcidma_errors_sets['default']):
            x = d.read('X',a)
            print formatter(k, '%i'%x, indent=1)

    if opts.runfile:
        print '</dsp_status>'
