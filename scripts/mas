#! /bin/sh
### BEGIN INIT INFO
# Provides:          mas
# Required-Start:    $local_fs $remote_fs
# Required-Stop:     $local_fs $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      S 0 1 6
# Short-Description: Launch MAS.
# Description:       Launch maslog_server and install MAS driver.
### END INIT INFO

# Author: Matthew Hasselfield <mhasse@phas.ubc.ca>

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/usr/sbin:/usr/bin:/sbin:/bin
DESC="MCE Aquisition Software"
NAME=mas
USER=mce
GROUP=mce
DAEMON=/usr/mce/bin/maslog_server
DAEMON_ARGS=
DRIVER=mce_dsp
POSTOPS=/usr/mce/bin/mas_mknodes
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
[ -f /etc/default/rcS ] && . /etc/default/rcS

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
        echo "Starting logging daemon."
	[ -e $PIDFILE ] || echo "" > $PIDFILE
	chown ${USER}:${GROUP} $PIDFILE

	start-stop-daemon --start --quiet --pidfile $PIDFILE \
	    --chuid $USER --group $GROUP \
	    --exec $DAEMON --test > /dev/null \
		|| return 1
	start-stop-daemon --start --quiet --pidfile $PIDFILE \
	    --chuid $USER --group $GROUP \
	    --exec $DAEMON -- $DAEMON_ARGS \
		|| return 2

	# Install MAS driver
        echo "Loading $DRIVER driver."
	modprobe $DRIVER || return 2

	# Create device nodes
	$POSTOPS
}

#
# Function that stops the daemon/service
#
do_stop()
{
        # We're not removing the device nodes, tough.

        # Remove driver
        echo "Removing $DRIVER driver."
        rmmod $DRIVER

	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
        echo "Stopping logging daemon."
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 \
	    --pidfile $PIDFILE
	RETVAL="$?"

	return "$RETVAL"
}

do_cleanup()
{
        [ -e $PIDFILE ] && rm -f $PIDFILE
	[ -e $PIDFILE ] && echo "Could not remove $PIDFILE, are you root?"
}


case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  cleanup)
	do_cleanup
	;;

  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload|cleanup}" >&2
	exit 3
	;;
esac

: