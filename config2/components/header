<?php

/*
 * Constants and functions
 */

/* Map from card name to hardware address */

$CARD_ADDRESS = array(
  "psc" => 0x01,
  "cc"  => 0x02,
  "rc1" => 0x03,
  "rc2" => 0x04,
  "rc3" => 0x05,
  "rc4" => 0x06,
  "bc1" => 0x07,
  "bc2" => 0x08,
  "bac" => 0x08,
  "bc3" => 0x09,
  "ac"  => 0x0a
);

$CARD_ERRBITS = array(
  "psc" => 0x00000007,
  "ac"  => 0x38000000,
  "bc1" => 0x07000000,
  "bc2" => 0x00e00000,
  "bac" => 0x00e00000,
  "bc3" => 0x001c0000,
  "rc1" => 0x00038000,
  "rc2" => 0x00007000,
  "rc3" => 0x00000e00,
  "rc4" => 0x000001c0,
  "cc"  => 0x00000038
);


/* Pseudo hardware addresses for virtual cards; for remote commanding over IP */

$VIRTUAL_BIAS = 0x80;
$VIRTUAL_ADDRESS = array(
  "dummy"  => $VIRTUAL_BIAS + 0x00,
  "sq2"    => $VIRTUAL_BIAS + 0x01,
  "sq1"    => $VIRTUAL_BIAS + 0x02,
  "sa"     => $VIRTUAL_BIAS + 0x03,
  "tes"    => $VIRTUAL_BIAS + 0x04,
  "heater" => $VIRTUAL_BIAS + 0x05
);

/* "sys" cards -- order and eligibility */

$SYS_CARDS = array(
 "cc", "rc1", "rc2", "rc3", "rc4", "bc1", "bc2", "bac", "bc3", "ac"
);


/* All possible readout cards. */

$RC_LIST = array("rc1", "rc2", "rc3", "rc4");



/* Functions for mappings */


function rc_map($param) {
    global $rc_present, $RC_LIST;
    $out = "";
    foreach ($rc_present as $i => $ok) {
        if (! $ok) continue;
        $count = 8;
        $start = $i * 8;
	$rc = $RC_LIST[$i];
        $out .= "                             " .
	  "{ start= {$start}; count={$count}; card=\"{$rc}\"; param=\"{$param}\"; offset=0; },\n";
    }
    // Remove final comma/linefeed
    $out = substr($out,0,-2);
    return $out;
}

function fw_range($card, $min=NULL, $max=NULL) {
  global $fw_rev;
  if (($min != NULL) && ($fw_rev[$card] < $min))
    return FALSE;
  if (($max != NULL) && ($fw_rev[$card] > $max))
    return FALSE;
  return TRUE;
}

function map_array($prefix, $count, $card, $length) {
  /* For fast SQ2 feedback.  Includes trailing command and line feed. */
  $output = "";
  for ($i=0; $i<$count; $i++) {
    $output .= "                {  name=\"{$prefix}{$i}\"; count={$length}; " .
        "maps=( { start=0;count={$length};card=\"{$card}\";param=\"{$prefix}{$i}\";" .
        "offset=0; }); },\n";
  }
  return $output;
}


/*
 * Useful pre-computations
 */

/* List of card addresses to which "sys" will be broadcast. */

$sys_id_list = array();
foreach ($SYS_CARDS as $card)
  if (in_array($card, $card_list))
    array_push($sys_id_list, sprintf("0x%02x", $CARD_ADDRESS[$card]));


/* List of card addresses to which "rca" will be broadcast. */

$rca_id_list = array();
foreach ($RC_LIST as $card)
  if (in_array($card, $card_list))
    array_push($rca_id_list, sprintf("0x%02x", $CARD_ADDRESS[$card]));


/* Compute flags for readout cards in this system. */

$rc_present = array();
$num_rc = 0;
foreach( $RC_LIST as $rc ) {
  array_push($rc_present, in_array($rc, $card_list));
  $num_rc += 1;
}


/* Squid systems (bias card DAC sets) have width based on maximum RC
   number */

foreach ($rc_present as $i => $ok) {	
  if ($ok) $num_columns = ($i+1)*8;
}


/* Frequently used hardware/firmware support flags: */

/* Are we running with a biasing address card? */
$hw_bac = in_array("bac", $card_list);

/* Are these 12-line TES bias cards? */
$hw_12tes = $hw_rev["bc"] >= "revE";

/* Does bias card firmware support fast switching? */
$fw_rev_bc_fast = fw_range("bc", $min=0x5000002);

/* Does clock card firmware support AWG? */
$fw_rev_cc_awg = fw_range("cc", $min=0x5000003);

/* Does clock card firmware support remote configuration? */
$fw_rev_cc_jtag = fw_range("cc", $min=0x5000005);


?>
